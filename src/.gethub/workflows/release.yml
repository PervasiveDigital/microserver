name: Publish Release

on:
  release:
      types: [published]

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  CONFIGURATION: "Release"
  VERBOSITY:  "Minimal" 
  
jobs:
  Release:
    name: Release on ${{ matrix.os }}
    runs-on: [ubuntu-latest]
    strategy:
      matrix:
        dotnet: ['3.1.100']

    steps:
    - name: Checkout
      uses: actions/checkout@v1
      
    - name: Show release event information
      run: |
        echo "release.name        = ${{ github.event.release.name }}"
        echo "release.body        = ${{ github.event.release.body }}"
        echo "release.upload_url  = ${{ github.event.release.upload_url }}"
        echo "release.html_url    = ${{ github.event.release.html_url }}"
        echo "release.tag_name    = ${{ github.event.release.tag_name }}"
        echo "release.draft       = ${{ github.event.release.draft }}"
        echo "release.prerelease  = ${{ github.event.release.prerelease }}"
        
    - name: Setup dotnet core (${{ matrix.dotnet }})
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ matrix.dotnet }}
    
    - name: Display dotnet core (${{ matrix.dotnet }})
      run: dotnet --info

    - name: Restore dotnet core (${{ matrix.dotnet }})
      run: dotnet restore --verbosity ${VERBOSITY}
    
    - name: Build dotnet core (${{ matrix.dotnet }})
      run: >-
        dotnet build -p:Version=${GITHUB_REF##*/v} 
        --no-restore
        --verbosity ${VERBOSITY}
        --configuration ${CONFIGURATION} 
        
    - name: Pack dotnet core (${{ matrix.dotnet }})
      run: >- 
        dotnet pack -p:PackageVersion=${GITHUB_REF##*/v}
        --include-symbols 
        --no-restore 
        --no-build 
        --verbosity ${VERBOSITY} 
        --configuration ${CONFIGURATION} 
        --output .builds/artifacts
      
    - name: Upload release artifacts
      uses: actions/upload-artifact@v1
      with:
        name: Release
        path: .builds/artifacts
    
    - name: Create release asset
      run: zip .builds/packages.zip -j .builds/artifacts/*.*nupkg
      
    - name: Upload release asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: .builds/packages.zip
        asset_name: Packages.zip
        asset_content_type: application/zip
    
    - name: Setup nuget
      uses: nuget/setup-nuget@v1
      with:
        nuget-api-key: ${{ secrets.NUGET_API_KEY }}
        nuget-version: 'latest' 

#    - name: Publish package to github
#      run: |
#      nuget source Add -Name "GitHub" -Source "https://nuget.pkg.github.com/microcompiler/index.json" -UserName microcompiler -Password ${{secrets.GITHUB_TOKEN}}
#      nuget push artifacts/*.nupkg -Source "GitHub"

#    - name: Publish package to nuget
#      run: |
#        nuget sources Add -Name "NuGet" -Source "https://int.nugettest.org"
#        nuget push artifacts/*.*nupkg -Source "NuGet"
